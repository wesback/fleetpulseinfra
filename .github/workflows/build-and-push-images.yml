name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - '.github/workflows/build-and-push-images.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - '.github/workflows/build-and-push-images.yml'
  workflow_dispatch:

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: wesback/fleetpulse-backend
  FRONTEND_IMAGE_NAME: wesback/fleetpulse-frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./app/backend  # TODO: Update path to actual backend code
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Optional: Image scanning with Trivy (uncomment to enable)
    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
    #     format: 'sarif'
    #     output: 'trivy-backend-results.sarif'
    
    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: always()
    #   with:
    #     sarif_file: 'trivy-backend-results.sarif'

  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./app/frontend  # TODO: Update path to actual frontend code
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Optional: Image scanning with Trivy (uncomment to enable)
    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
    #     format: 'sarif'
    #     output: 'trivy-frontend-results.sarif'
    
    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: always()
    #   with:
    #     sarif_file: 'trivy-frontend-results.sarif'

  # Optional: Sign images with Cosign (uncomment to enable)
  # sign-images:
  #   needs: [build-backend, build-frontend]
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'pull_request'
  #   steps:
  #   - name: Install Cosign
  #     uses: sigstore/cosign-installer@v3
  #     
  #   - name: Sign backend image
  #     env:
  #       COSIGN_EXPERIMENTAL: 1
  #     run: |
  #       cosign sign --yes ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
  #       
  #   - name: Sign frontend image
  #     env:
  #       COSIGN_EXPERIMENTAL: 1
  #     run: |
  #       cosign sign --yes ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}