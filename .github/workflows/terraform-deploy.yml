name: Terraform Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  workflow_dispatch:
    inputs:
      region:
        description: 'Optional: override the Azure region for this run'
        required: false
        default: ''
      custom_domains:
        description: 'Optional: JSON map for custom_domains, e.g. {"backend":"a","frontend":"b","wildcard":"*.example.com"}'
        required: false
        default: ''

env:
  TF_VERSION: "1.6.0"
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_STORAGE_USE_AZUREAD: true

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    
    # Use OIDC for authentication
    permissions:
      contents: read
      id-token: write
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Prepare Terraform variables (validate required secrets)
      working-directory: ./infra/terraform/envs/prod
      run: |
        # Fail early if required secrets are missing
        if [ -z "${TF_VAR_vpn_shared_key:-}" ]; then
          echo "Missing required secret: TF_VAR_vpn_shared_key" >&2
          exit 1
        fi
        if [ -z "${TF_VAR_on_premises_gateway_ip:-}" ]; then
          echo "Missing required secret: TF_VAR_on_premises_gateway_ip" >&2
          exit 1
        fi

        # If workflow inputs were provided, export them as TF_VAR_* so Terraform picks them up
        if [ -n "${INPUT_REGION:-}" ]; then
          echo "Setting TF_VAR_location from workflow input"
          echo "TF_VAR_location=${INPUT_REGION}" >> $GITHUB_ENV
        fi
        if [ -n "${INPUT_CUSTOM_DOMAINS:-}" ]; then
          echo "Setting TF_VAR_custom_domains from workflow input"
          echo "TF_VAR_custom_domains=${INPUT_CUSTOM_DOMAINS}" >> $GITHUB_ENV
        fi

        # We do not print or log secrets here. They are provided via env and masked by Actions.
      env:
        TF_VAR_vpn_shared_key: ${{ secrets.TF_VPN_SHARED_KEY }}
        TF_VAR_on_premises_gateway_ip: ${{ secrets.TF_ON_PREM_GATEWAY_IP }}
        INPUT_REGION: ${{ github.event.inputs.region }}
        INPUT_CUSTOM_DOMAINS: ${{ github.event.inputs.custom_domains }}

    - name: Terraform Format Check
      working-directory: ./infra/terraform/envs/prod
      run: terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: ./infra/terraform/envs/prod
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_vpn_shared_key: ${{ secrets.TF_VPN_SHARED_KEY }}
        TF_VAR_on_premises_gateway_ip: ${{ secrets.TF_ON_PREM_GATEWAY_IP }}

    - name: Terraform Validate
      working-directory: ./infra/terraform/envs/prod
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./infra/terraform/envs/prod
      run: terraform plan -out=tfplan -var-file="terraform.tfvars"
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_vpn_shared_key: ${{ secrets.TF_VPN_SHARED_KEY }}
        TF_VAR_on_premises_gateway_ip: ${{ secrets.TF_ON_PREM_GATEWAY_IP }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./infra/terraform/envs/prod
      run: terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_vpn_shared_key: ${{ secrets.TF_VPN_SHARED_KEY }}
        TF_VAR_on_premises_gateway_ip: ${{ secrets.TF_ON_PREM_GATEWAY_IP }}

    - name: Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./infra/terraform/envs/prod
      run: |
        echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        terraform output >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_vpn_shared_key: ${{ secrets.TF_VPN_SHARED_KEY }}
        TF_VAR_on_premises_gateway_ip: ${{ secrets.TF_ON_PREM_GATEWAY_IP }}

    # Save outputs for post-deploy job
    - name: Save Terraform Outputs
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ./infra/terraform/envs/prod
      run: |
        terraform output -json > terraform-outputs.json
        echo "STORAGE_ACCOUNT_NAME=$(terraform output -raw storage_account_name)" >> $GITHUB_ENV
        echo "KEY_VAULT_NAME=$(terraform output -raw key_vault_name)" >> $GITHUB_ENV
        echo "ACA_ENV_ID=$(terraform output -raw resource_ids | jq -r '.container_app_environment_id')" >> $GITHUB_ENV
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_vpn_shared_key: ${{ secrets.TF_VPN_SHARED_KEY }}
        TF_VAR_on_premises_gateway_ip: ${{ secrets.TF_ON_PREM_GATEWAY_IP }}

    - name: Upload Terraform Outputs
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: infra/terraform/envs/prod/terraform-outputs.json
        retention-days: 1

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Checkov scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./infra/terraform
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        quiet: true
        soft_fail: true

    - name: Upload Checkov scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif